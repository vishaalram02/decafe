{
  "fibonacci": "import printf;\n\nint fibonacci(int n) {\n    if (n <= 1){\n        return n;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nvoid main() {\n    int i;\n    for (i = 0; i < 30; i++){\n        printf(\"%d \", fibonacci(i));\n    }\n}",
  "bubble sort": "import printf; \n\nint arr[] = {5, 2, 3, 4, 1};\n\nvoid bubble_sort(int n) {\n    int i, j, temp;\n    for (i = 0; i < n - 1; i++){\n        for (j = 0; j < n - i - 1; j++){\n            if (arr[j] > arr[j + 1]){\n                temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n}\n\nvoid main() {\n    int i;\n    bubble_sort(len(arr));\n    for (i = 0; i < len(arr); i++){\n        printf(\"%d \", arr[i]);\n    }\n}",
  "merge sort": "import printf;\n\nint arr[] = {6, 4, 0, 8, 5, 3, 1, 7, 2, 9};\nint L[10], R[10];\n\nvoid merge(int l, int m, int r) {\n    int i, j, k, n1, n2;\n    n1 = m - l + 1;\n    n2 = r - m;\n    for (i = 0; i < n1; i++){\n        L[i] = arr[l + i];\n    }\n    for (j = 0; j < n2; j++){\n        R[j] = arr[m + 1 + j];\n    }\n    i = 0;\n    j = 0;\n    k = l;\n    while (i < n1 && j < n2){\n        if (L[i] <= R[j]){\n            arr[k] = L[i];\n            i++;\n        } else {\n            arr[k] = R[j];\n            j++;\n        }\n        k++;\n    }\n    while (i < n1){\n        arr[k] = L[i];\n        i++;\n        k++;\n    }\n    while (j < n2){\n        arr[k] = R[j];\n        j++;\n        k++;\n    }\n}\n\nvoid merge_sort(int l, int r) {\n    if (l < r){\n        int m;\n        m = l + (r - l) / 2;\n        merge_sort(l, m);\n        merge_sort(m + 1, r);\n        merge(l, m, r);\n    }\n}\n\nvoid main() {\n    int i;\n    merge_sort(0, len(arr) - 1);\n    for (i = 0; i < len(arr); i++){\n        printf(\"%d \", arr[i]);\n    }\n}",
  "hello world": "import printf;\n\nvoid main() {\n    printf(\"Hello, World!\");\n}"
}
